//const MAX_POINTS: u32 = 100_000; - –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞
fn main() {
    // –ó–∞—Ç–∏—Ä–∞–Ω–∏–µ
    let x = 5;
    let x = x + 1;
    let x = x * 2;

    let spaces = " ";
    let spaces = spaces.len();
    println!("–ó–Ω–∞—á–µ–Ω–∏–µ —Ö —Ä–∞–≤–Ω–æ {}", x);
    let guess: u32 = "42".parse().expect("–ù–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º!");
    
    // –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
    let sum = 5 + 10; //
    let differende = 95.5 - 4.3; 
    let product = 4 * 30;
    let quotient = 56.7 / 32.2;
    let remainder = 43 % 5;
    println!("–ó–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ {}", sum);
    println!("–ó–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ {}", differende);
    println!("–ó–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ {}", product);
    println!("–ó–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ {}", quotient);
    println!("–ó–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ {}", remainder);

    // –ë—É–ª–µ–≤ —Ç–∏–ø
    let t = true;
    let f : bool = false;

    // –°–∏–º–≤–æ–ª—å–Ω—ã–π —Ç–∏–ø
    let c = 'z';
    let z = '∆∂';
    let cat = 'üêà';

    // –ö–æ—Ä—Ç–µ–∂–Ω—ã–π —Ç–∏–ø
    let zatup: (i32, f64, u8) = (500, 6.4, 1);
    let (x,y,z) = zatup;
    println!(" –ó–Ω–∞—á–µ–Ω–∏–µ x —Ä–∞–≤–Ω–æ {} \n –ó–Ω–∞—á–µ–Ω–∏–µ y —Ä–∞–≤–Ω–æ {} \n –ó–Ω–∞—á–µ–Ω–∏–µ z —Ä–∞–≤–Ω–æ {}", x,y,z);
    let x: (i32, f64, u8) = (500, 6.4, 1);
    let five_hundred = x.0;
    let six_point_four = x.1;
    let one = x.2;
    println!(" –ó–Ω–∞—á–µ–Ω–∏–µ One —Ä–∞–≤–Ω–æ {}", one);

    // –ú–∞—Å—Å–∏–≤
    let a = [1,2,3,4,5];
    let months = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"];
    let a = [3; 5];
    
    //–î–æ—Å—Ç—É–ø –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –º–∞—Å—Å–∏–≤–∞
    let a = [1,2,3,4,5];
    let first = a[0];
    let second = a[1];
    
    //–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —ç–ª–µ–º–µ–Ω—Ç—É –º–∞—Å—Å–∏–≤–∞
    // let a = [1,2,3,4,5];
    // let index = 10;
    // let element = a[index];
    // println!("–ó–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ä–∞–≤–Ω–æ {}", element);

    
}
